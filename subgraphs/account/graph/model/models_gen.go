// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	OwnerID *string     `json:"ownerId"`
	Name    string      `json:"name"`
	Type    AccountType `json:"type"`
}

type NewAccount struct {
	Name string      `json:"name"`
	Type AccountType `json:"type"`
}

type Organisation struct {
	ID       string     `json:"id"`
	Accounts []*Account `json:"accounts"`
}

func (Organisation) IsEntity() {}

type User struct {
	ID       string     `json:"id"`
	Accounts []*Account `json:"accounts"`
}

func (User) IsEntity() {}

type AccountType string

const (
	AccountTypeCurrentAccount AccountType = "CURRENT_ACCOUNT"
	AccountTypeJointAccount   AccountType = "JOINT_ACCOUNT"
	AccountTypeSavingsAccount AccountType = "SAVINGS_ACCOUNT"
)

var AllAccountType = []AccountType{
	AccountTypeCurrentAccount,
	AccountTypeJointAccount,
	AccountTypeSavingsAccount,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeCurrentAccount, AccountTypeJointAccount, AccountTypeSavingsAccount:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
