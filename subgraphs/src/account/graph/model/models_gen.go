// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BankAccount struct {
	OwnerID   *string         `json:"ownerId"`
	Name      string          `json:"name"`
	AccountID string          `json:"accountId"`
	Type      BankAccountType `json:"type"`
	Balance   int             `json:"balance"`
}

type BankAccountInput struct {
	Name string          `json:"name"`
	Type BankAccountType `json:"type"`
}

type Organisation struct {
	ID       string         `json:"id"`
	Accounts []*BankAccount `json:"accounts"`
}

func (Organisation) IsEntity() {}

type User struct {
	ID       string         `json:"id"`
	Accounts []*BankAccount `json:"accounts"`
}

func (User) IsEntity() {}

type BankAccountType string

const (
	BankAccountTypeCurrent BankAccountType = "CURRENT"
	BankAccountTypeJoint   BankAccountType = "JOINT"
	BankAccountTypeSavings BankAccountType = "SAVINGS"
)

var AllBankAccountType = []BankAccountType{
	BankAccountTypeCurrent,
	BankAccountTypeJoint,
	BankAccountTypeSavings,
}

func (e BankAccountType) IsValid() bool {
	switch e {
	case BankAccountTypeCurrent, BankAccountTypeJoint, BankAccountTypeSavings:
		return true
	}
	return false
}

func (e BankAccountType) String() string {
	return string(e)
}

func (e *BankAccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BankAccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BankAccountType", str)
	}
	return nil
}

func (e BankAccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
